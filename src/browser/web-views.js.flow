/* @noflow */

/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. */

import {Effects} from "reflex"
import type {Address, DOM} from "reflex"
import type {URI, ID, Integer} from "../common/prelude"
import * as WebView from "./web-view"
import * as Stopwatch from "../common/stopwatch"

export type {ID}

export type Selector =
  { active: ID
  , selected: ID
  }

export type Display =
  { depth: number
  }

export type Model =
  { nextID: number
  , selector: ?Selector
  , order: Array<ID>
  , entries: {[key:ID]: WebView.Model}
  , display: Display

  , foldAnimation: Stopwatch.Model
  , isFolded: boolean
  }


export type Action =
  | { type: "NoOp" }
  | { type: "PushedDown" }
  | { type: "NavigateTo"
    , uri: URI
    }
  | { type: "Open"
    , options: WebView.Options
    }
  | { type: "Open!WithMyIFrameAndInTheCurrentTick"
    , options: WebView.Options
    }
  | { type: "CloseActive" }
  | { type: "CloseByID"
    , id: ID
    }
  | { type: "Closed"
    , id: ID
    }
  | { type: "ActivateSelected" }
  | { type: "ActivateByID"
    , id: ID
    }
  | { type: "Activated"
    , id: ID
    }
  | { type: "SelectRelative"
    , offset: Integer
    }
  | { type: "SelectByID"
    , id: ID
    }
  | { type: "Selected"
    , id: ID
    }
  | { type: "Fold" }
  | { type: "Unfold" }
  | { type: "Folded" }
  | { type: "Unfolded" }
  | { type: "FoldAnimation"
    , action: Stopwatch.Action
    }
  | { type: "ActiveWebView"
    , action: WebView.Action
    }
  | { type: "WebView"
    , id: ID
    , action: WebView.Action
    }
  | { type: "ShowTabs" }
  | { type: "Create" }
  | { type: "Edit" }

declare export function NavigateTo
  (uri:URI):
  Action

declare export function Open
  (options:WebView.Options):
  Action


declare export var CloseActive:Action

declare export function CloseByID
  (id:ID):
  Action

declare export function SelectByID
  (id:ID):
  Action

declare export var SelectNext:Action
declare export var SelectPrevious:Action
declare export var ActivateSelected:Action

declare export function ActivateByID
  (id:ID):
  Action

declare export var Unfold:Action
declare export var Fold:Action

declare export function ActionByID
  (id:ID, action:WebView.Action):
  Action


declare export var ZoomIn:Action
declare export var ZoomOut:Action
declare export var ResetZoom:Action

declare export var Stop:Action
declare export var Reload:Action
declare export var GoBack:Action
declare export var GoForward:Action

declare export var Focus:Action

declare export var ShowTabs:Action
declare export var Create:Action
declare export var Edit:Action

declare export function getActiveURI
  (model:Model, fallback?:URI):
  URI

declare export function init
  ():
  [Model, Effects<Action>]

declare export function update
  (model:Model, action:Action):
  [Model, Effects<Action>]

declare export function view
  (model:Model, address:Address<Action>):
  DOM
