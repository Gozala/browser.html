/* @flow */

import {Task, Effects} from "reflex"
import type {Never} from "reflex"
import type {ID, URI, Time} from "../../../../common/prelude"
import type {Result} from  "../../../../common/result"

export type {ID, URI, Time}

export type Model =
  { id: ID
  , canGoBack: boolean
  , canGoForward: boolean

  // URI of the page displayed by a web-view (although web view maybe still
  // loading & technically it won't be displayed). This uri updates during any
  // redirects or when user navigates away by going back / forward or by
  // navigating to a new uri.
  , currentURI: URI

  // URI that was entered in a location bar by a user. Note this may not be an
  // uri of currently loaded page as uri could have being redirect or user could
  // have navigated away by clicking a link or pressing go back / go forward
  // buttons. This pretty much represents `src` attribute of the iframe.
  , initiatedURI: URI
  }


export type Action =
  | { type: "NoOp" }
  // Action is triggered whenever web-view start loading a new URI. Passed URI
  // directly corresponds `currentURI` in the model.
  | { type: "LocationChanged"
    , uri: URI
    , canGoBack: ?boolean
    , canGoForward: ?boolean
    }
  // Editing uri in the location bar causes `ChangeLocation` action. It's
  // `uri` field directly corresponds to `initiatedURI` field on the model,
  // althoug this action also updates `currentURI`.
  | { type: "Load"
    , uri: URI
    }
  | { type: "Stop" }
  | { type: "Reload" }
  | { type: "GoBack" }
  | { type: "GoForward" }
  // When model is updated with above action Effects with following Response
  // actions are triggered.
  | { type: "CanGoBackChanged"
    , result: Result<Error, boolean>
    }
  | { type: "CanGoForwardChanged"
    , result: Result<Error, boolean>
    }
  | { type: "Stopped"
    , stopResult: Result<Error, void>
    }
  | { type: "Reloaded"
    , reloadResult: Result<Error, void>
    }
  | { type: "WentBack"
    , goBackResult: Result<Error, void>
    }
  | { type: "WentForward"
    , goForwardResult: Result<Error, void>
    }

declare export var Stop:Action
declare export var Reload:Action
declare export var GoBack:Action
declare export var GoForward:Action


declare export function LocationChanged
  (uri:URI):
  Action

declare export function Load
  (uri:URI):
  Action


declare export function canGoBack
  (id:ID):
  Task<Never, Result<Error, boolean>>

declare export function canGoForward
  (id:ID):
  Task<Never, Result<Error, boolean>>

declare export function  stop
  (id:ID):
  Task<Never, Result<Error, void>>

declare export function reload
  (id:ID):
  Task<Never, Result<Error, void>>

declare export function init
  (id:ID, uri:URI):
  [Model, Effects<Action>]

declare export function update
  (model:Model, action:Action):
  [Model, Effects<Action>]
