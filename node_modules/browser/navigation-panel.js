/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. */

define((require, exports, module) => {

'use strict';

const {DOM} = require('react')
const Component = require('omniscient');
const {InputField} = require('./editable');
const {Element} = require('./element');
const {navigateTo} = require('./actions');

const WindowControls = Component(options =>
  DOM.div({className: 'windowctrls'}, [
    DOM.div({className: 'windowctrl win-close-button',
             title: 'close',
             onClick: event => window.close()}),
    DOM.div({className: 'windowctrl win-min-button',
             title: 'minimze',
             onClick: event => window.minimize()}),
    DOM.div({className: 'windowctrl win-max-button',
             title: 'maximize',
             onClick: event => {
               if (document.mozFullScreenElement) {
                 document.mozCancelFullScreen();
               } else {
                 document.body.mozRequestFullScreen();
               }
             }})
  ]));
exports.WindowControls = WindowControls;

const NavigationControls = Component(({input, webViewer, title}) =>
  DOM.div({
    className: 'urlbar',
    onClick: event => input.set('isFocused', true)
  }, [
    InputField({
      className: 'urlinput',
      placeholder: 'Search or enter address',
      value: input.get('value') || webViewer.get('uri'),
      type: 'text',
      submitKey: 'Enter',
      isFocused: input.get('isFocused'),
      selection: input.get('isFocused'),
      onFocus: _ => input.set('isFocused', true),
      onBlur: _ => input.set('isFocused', false),
      onChange: event => input.set('value', event.target.value),
      onSubmit: event => navigateTo(webViewer, event.target.value, true)
    }),
    DOM.p({className: 'pagesummary'}, [
      DOM.span({className: 'identity'}, ''),
      DOM.span({className: 'pageurlsummary'}, ''),
      DOM.span({className: 'pagetitle'}, title || '')
    ])
  ]));
exports.NavigationControls = NavigationControls;

const NavigationPanel = Component(options =>
  DOM.div({
    className: 'navbar' + (options.input.get('isFocused') ? ' urledit' : '')
  }, [
    WindowControls(options),
    NavigationControls(options),
    DOM.div({className: 'navbarendspacer'})
  ]));
exports.NavigationPanel = NavigationPanel;

});
