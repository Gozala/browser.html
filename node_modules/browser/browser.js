/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. */

define((require, exports, module) => {

'use strict';

const Component = require('omniscient');
const {DOM} = require('react');
const {NavigationPanel} = require('./navigation-panel');
const {Deck} = require('./web-viewer');
const {PageSwitch} = require('./page-switch');
const {Element, Event, Field, Attribute} = require('./element');

// Define custom `main` element with a custom `scrollGrab` attribute
// that maps to same named proprety.
const Main = Element('main', {
  os: Attribute('os'),
  title: Field((node, current, past) => {
    node.ownerDocument.title = current;
  }),
  scrollGrab: Field((node, current, past) => {
    node.scrollgrab = current;
  }),
  onFocus: Event('focus', node => node.ownerDocument.window),
  onBlur: Event('blur', node => node.ownerDocument.window)
});
exports.Main = Main;

// Browser is a root component for our application that just delegates
// to a core sub-components here.
const Browser = Component(options => {
  const webViewers = options.get('webViewers');
  const index = Deck.selectedIndex(webViewers);
  const webViewer = options.cursor(['webViewers', index]);
  return  Main({
    os: options.get('os'),
    title: webViewer.get('uri'),
    scrollGrab: true,
    className: 'scrollgrab moz-noscrollbars' +
               (options.get('isScrolled') ? ' scrolled' : '') +
               (options.get('isDocumentFocused') ' windowFocused' : ''),
    onScroll: event => options.set('isScrolled', event.target.scrollTop != 0),
    onFocus: event => options.set('isDocumentFocused', true),
    onBlur: event => options.set('isDocumentFocused', false)
  }, [
    NavigationPanel({
      input: options.cursor('input'),
      webViewer: webViewer,
      title: webViewer.get('title'),
    }),
    Deck({key: 'deck',
          className: 'iframes deck',
          items: options.cursor('webViewers')}),
    PageSwitch(options.cursor('webViewers'))
  ]);
});
exports.Browser = Browser;

});
